trigger:
  branches:
    include:
      - master
variables:
  - group: OlasInternational_RN # change it to the name you have set
pool:
  vmImage: 'macos-latest'
steps:
  - checkout: self
    persistCredentials: true
    clean: true
  - task: NodeTool@0
    displayName: 'Install Node'
    inputs:
      versionSpec: '18.20.0' # you can use your desired version here
  - script: yarn install
    displayName: Install Dependencies
  - script: |
      # Disable autocommit on version bump 
      yarn config set version-sign-git-tag false
      yarn config set version-git-tag false
      yarn config set version-commit-hooks false
      # Checkout branch where the build is triggered
      git checkout $(Build.SourceBranchName)
      # Extract existing version of package.json
      oldVer=$(jq -r ".version" package.json)
      # Bump version
      yarn version --patch
      # Add bumped version to staging
      git add *
      # Extract new version of package.json
      newVer=$(jq -r ".version" package.json)
      # Set environment variables
      echo "##vso[task.setvariable variable=OLD_VERSION]$oldVer"
      echo "##vso[task.setvariable variable=NEW_VERSION]$newVer"
    displayName: 'Bump version and set variables'
    # WEB
  - script: |
      echo "Building web version for production..."
      yarn build:web
    displayName: 'Build Web App for Production'
  #- task: AzureCLI@2
  #  inputs:
  #    azureSubscription: 'AzureServiceConnection'
  #    scriptType: 'bash'
  #    scriptLocation: 'inlineScript'
  #    inlineScript: |
  #      echo "Uploading web build to Azure Blob Storage..."
  #      az storage blob upload-batch \
  #        --destination \$web \
  #        --source dist/ \
  #        --account-name <your-storage-account> \
  #        --overwrite
  #  displayName: 'Upload Web Build to Azure Blob Storage'
  #  #Apps 
  #- task: ios-bundle-version@1
  #  displayName: 'Bump iOS version'
  #  inputs:
  #    sourcePath: 'ios/OlasInternationalRN/Info.plist'
  #    versionCodeOption: 'buildid'
  #    versionCode: '$(Build.BuildId)'
  #    versionName: '$(NEW_VERSION)'
  #    printFile: false
  - task: Gradle@2
    displayName: 'Build APK'
    inputs:
      gradleWrapperFile: 'android/gradlew'
      workingDirectory: 'android/'
      options: '-PversionName=$(NEW_VERSION) -PversionCode=$(Build.BuildId)'
      tasks: 'assembleRelease'
      publishJUnitResults: false
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      gradleOptions: '-Xmx3072m'
      sonarQubeRunAnalysis: false
  - task: AndroidSigning@3
    displayName: 'Sign APK'
    inputs:
      apkFiles: 'android/app/build/outputs/apk/release/*.apk'
      apksignerKeystoreFile: 'mobile-prod.keystore'
      apksignerKeystorePassword: '$(AndroidKeyStorePassword)'
      apksignerKeystoreAlias: '$(AndroidKeyAlias)'
      apksignerKeyPassword: '$(AndroidKeyAliasPassword)'
      zipalign: true
  - task: PublishBuildArtifacts@1
    displayName: 'Publish APK to artifacts'
    inputs:
      PathtoPublish: 'android/app/build/outputs/apk/release'
      ArtifactName: 'android'
      publishLocation: 'Container'
  #- task: AppCenterDistribute@3
  #  displayName: 'Upload APK to AppCenter'
  #  inputs:
  #    serverEndpoint: 'App Center'
  #    appSlug: 'hnadeem/olasinternational-rn-Android'
  #    appFile: 'android/app/build/outputs/apk/release/app-release-unsigned.apk'
  #    releaseNotesOption: 'file'
  #    isMandatory: true
  #    destinationType: 'groups'
  #    distributionGroupId: 'f940ccde-a812-4ade-98d8-76c3ab1d0c2e'
  #    isSilent: true
  - script: |
      tag="mobile_$(NEW_VERSION)"
      echo "New tag $tag"
      git add *
      git commit -m "Update version from $(OLD_VERSION) to $(NEW_VERSION)"
      git tag $tag
      git pull --rebase origin $(Build.SourceBranchName)
      git push origin $(Build.SourceBranchName)
      git push --tags
    displayName: Bump commit
  #- task: InstallAppleCertificate@2
  #  displayName: Install Apple Certificate
  #  inputs:
  #    certSecureFile: 'MobileProd.p12'
  #    certPwd: '$(AppleCertificatePassword)'
  #    keychain: 'temp'
  #    deleteCert: true
  #- task: InstallAppleProvisioningProfile@1
  #  displayName: 'Install Apple Provisioning Profile'
  #  inputs:
  #    provisioningProfileLocation: 'secureFiles'
  #    provProfileSecureFile: 'olasinternational-rn.mobileprovision'
  #    removeProfile: true
  #- task: CocoaPods@0
  #  displayName: 'Install CocoaPods'
  #  inputs:
  #    workingDirectory: 'ios'
  #- task: Xcode@5
  #  displayName: 'Build IPA'
  #  inputs:
  #    actions: 'build'
  #    configuration: 'Release'
  #    sdk: 'iphoneos'
  #    xcWorkspacePath: 'ios/OlasInternationalRN.xcworkspace'
  #    scheme: 'OlasInternationalRN'
  #    packageApp: true
  #    exportPath: 'output'
  #    signingOption: 'manual'
  #    signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
  #    provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'
  #- task: CopyFiles@2
  #  displayName: 'Copy IPA'
  #  inputs:
  #    contents: '**/*.ipa'
  #    targetFolder: '$(build.artifactStagingDirectory)'
  #    overWrite: true
  #    flattenFolders: true
  #- task: PublishBuildArtifacts@1
  #  displayName: 'Publish IPA to artifacts'
  #  inputs:
  #    PathtoPublish: '$(build.artifactStagingDirectory)'
  #    ArtifactName: 'ios'
  #    publishLocation: 'Container'
  #- task: AppCenterDistribute@3
  #  displayName: 'Upload IPA to AppCenter'
  #  inputs:
  #    serverEndpoint: 'App Center'
  #    appSlug: 'hnadeem/olasinternational-rn-iOS'
  #    appFile: 'output/olasinternational-rn.ipa'
  #    releaseNotesOption: 'file'
  #    isMandatory: true
  #    destinationType: 'groups'
  #    distributionGroupId: '058a4704-ea24-4877-a2f0-bdfaff9335dc'
  #    isSilent: true